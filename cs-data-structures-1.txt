Part 1: Discussion Questions

Runtime

When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?
The number of animal crackers in the box is the workload--so the runtime would be O(n). The worst case would be finding the elephant cracker as the last cracker. :( 

Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:
O(1)
O(log n)
O(n)
O(n log n)
O(n^2)
O(2^n)


Stacks and Queues

In the following cases, would a stack or queue be a more appropriate data structure?
-The process of loading and unloading pallets onto a flatbed truck
Stack
-Putting bottle caps on bottles of beer as they roll down an assembly line
Queue
-Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)
Queue
-Describe two more situations where a queue would be an appropriate data structure.
Users are waiting to buy concert tickets, task list
-Describe two more situations where a stack would be an appropriate data structure.
Back button on browser, undo (ctrl-z)

Linked Lists

Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)
Nodes: Boxes that contain the data ("Apple", "Berry", "Cherry")
Head: Arrow that points to node "apple"
Tail: Node that has an arrow that points to None

What’s the difference between doubly- and singly-linked lists?
Singly-linked lists only have a relationship arrow pointing in one direction. Doubly-linked lists have arrows pointing 
to both nodes so the relationship goes both ways.

Why is it faster to append to a linked list if we keep track of the tail as an attribute?
The linked list knows where the end of the list is if there is a tail attribute. If there is not a tail attribute,
each item of the linked list must be iterated over to find the node that points to "None" before an item can be
appended after that.

Trees


Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burritos (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
Moving from left to right: food, Italian, Indian, Mexican, lasagna, pizza, tikka masala, saag, burritos

Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
Moving from left to right: food, Italian, lasagna, pizza, thin crust, Chicago-style

How is a binary search tree different from other trees?
Binary search is applicable to trees that only have two branches per node. This style of searching also assumes the tree is balanced which helps to cut down on runtime of the search. Each time a node a checked, the search would either proceed down the left (less than) or right (greater than) branch off the node effectively cutting the search items in half.